{
  "id": "test_1",
  "timeType": "processing",
  "streamEngine": "com.roc.stream.SiddhiStreamConverter",
  "exp": "from ${0} select timestamp, id, aviator(name,'([\\w0-8]+)@\\w+[\\.\\w+]+') as name, aviator(price+price) as price insert into  outputStream",
  "sources": [
    {
      "id": "inputStream",
      "fields": "id String,name String,price Double,timestamp Long",
      "type": "kafka",
      "host": "172.16.58.181:9092,172.16.58.182:9092,172.16.58.183:9092",
      "auth": "",
      "storage": "siddhi02"
    }
  ],
  "sinks": [
    {
      "id": "1",
      "type": "hbase",
      "host": "172.16.58.181:2181,172.16.58.182:2181,172.16.58.183:2181",
      "auth": "",
      "storage": "flink"
    }
  ]
}

//{"id":"flink_test01","name":"siddhi33","price":1823.0,"timestamp":1611387930000}
// {\"id\":\"test_1\",\"timeType\":\"processing\",\"streamEngine\":\"com.jelly.flink.stream.SiddhiStreamConverter\",\"exp\":\"def runPattern() { Pattern<Event, ?> pattern = Pattern.<String> begin(\\"begin\\").where(new SimpleCondition<Event>() {@Override boolean filter(Event event) throws Exception {return event.getValue().contains(\\"失败\\")}}).next(\\"next\\").where(new SimpleCondition<Event>() {@Override boolean filter(Event event) throws Exception {return event.getValue().contains(\\"失败\\")}}) .within(Time.seconds(5)) return pattern}\",\"sources\":[{\"id\":\"inputStream\",\"fields\":\"id String,name String,price Double,timestamp Long\",\"type\":\"kafka\",\"host\":\"172.16.58.181:9092,172.16.58.182:9092,172.16.58.183:9092\",\"auth\":\"\",\"storage\":\"siddhi02\"}],\"sinks\":[{\"id\":\"1\",\"type\":\"hbase\",\"host\":\"172.16.58.181:2181,172.16.58.182:2181,172.16.58.183:2181\",\"auth\":\"\",\"storage\":\"flink\"}]}
//-jd "{\"id\":\"test_1\",\"timeType\":\"processing\",\"streamEngine\":\"com.roc.stream.DefaultStreamConverter\",\"exp\":\"def run() {return Pattern.<String> begin(\\"begin\\").where(new SimpleCondition<LinkedHashMap<String, Object>>() {@Override boolean filter(LinkedHashMap<String, Object> dataMap) throws Exception { return dataMap.get(\\"name\\").toString().contains(\\"失败\\") } }) .next(\\"next\\").where(new SimpleCondition<LinkedHashMap<String, Object>>() { @Override boolean filter(LinkedHashMap<String, Object> dataMap) throws Exception {return dataMap.get(\\"name\\").toString().contains(\\"失败\\") } }).within(Time.seconds(5)) }\",\"sources\":[{\"id\":\"inputStream\",\"fields\":\"id String,name String,price Double,timestamp Long\",\"type\":\"kafka\",\"host\":\"localhost:9092\",\"auth\":\"\",\"storage\":\"flink_kafka_poc_input\"}],\"sinks\":[{\"id\":\"inputStream\",\"type\":\"kafka\",\"host\":\"localhost:9092\",\"auth\":\"\",\"storage\":\"flink_kafka_poc_output\"}]}"